facet_grid(.~Metric, scale="free_y") +
scale_y_continuous(limits = c(0, NA)) +
#labs(title=paste0(player, " Goal Production vs Expected by Season\n@CrowdScoutSprts (github.com/C92Anderson/xG-Model)")) +
labs(y="Individual xG and GF per Game Played", x="", color="") +
#annotate("text", x = 1, y = .025, hjust=0, label = "@CrowdScoutSprts\nxG Model built using nhlscrapr\ngithub.com/C92Anderson/xG-Model") +
theme(panel.background = element_blank(),
axis.title.x=element_blank(),
strip.text.x = element_text(size = 24),
strip.text.y = element_text(size = 24),
panel.grid.major.y = element_line( colour = "white", size = 2),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
absolute <- player_stats %>%
dplyr::select(Player, season,`Actual Goals`, `Expected Goals`, `iFF per GP`) %>%
as.data.frame() %>%
reshape2::melt(id.vars = c("Player", "season","iFF per GP")) %>%
mutate(Metric = "Absolute Totals") %>%
ggplot() +
facet_grid(.~Metric, scale="free_y") +
ylim(c(0,NA)) +
geom_bar(aes(x=season, y=value, group=variable,fill=variable), position="dodge", stat="identity") +
geom_label(data=player_stats,aes(x=season, y=max(player_stats$xG, player_stats$`Actual Goals`),
label=paste0(round(player_stats$`Actual Goals` - player_stats$xG,1), ""))) +
geom_text(data=player_stats, size=7,aes(x=season, y=min(player_stats$xG) / 1,
label=paste0(round(`iFF per GP`,1)," iFF/GP\n",round(Mean_Shot_Distance,1),"ft\n",round(Mean_Shot_Angle,1),"Â°"))) +
theme_standard() + ggthemes::scale_fill_gdocs() +
labs(color="") +
#labs(title=paste0(player, " xG and GF by Season")) +
labs(x="Season", y="Individual xG and GF", fill="") +
theme(#legend.position = "top",
strip.text.x = element_text(size = 24),
strip.text.y = element_text(size = 24),
panel.grid.major.y = element_line( colour = "white", size = 2))
# Plot two graphs together
library(gridExtra)
gA <- ggplotGrob(per_shot)
gC <- ggplotGrob(per_game)
gB <- ggplotGrob(absolute)
maxWidth = grid::unit.pmax(gA$widths[2:5], gC$widths[2:5], gB$widths[2:5])
gA$widths[2:5] <- as.list(maxWidth)
gB$widths[2:5] <- as.list(maxWidth)
gC$widths[2:5] <- as.list(maxWidth)
p4 <- arrangeGrob(
gA, gC, gB, nrow = 3, heights = c(0.80, 0.80, 0.80))
#return(out)
ggsave(filename=paste0("/Users/colander1/Downloads/",player,"_shooting_bySeason2.png"), plot=p4,  width=16, height=18)
}
#xG_v_GF_pershot("MAX PACIORETTY")
#xG_v_GF_pershot("MICHAEL GRABNER")
#xG_v_GF_pershot("DMITRIJ JASKIN")
#xG_v_GF_pershot("SEAN MONAHAN")
#xG_v_GF_pershot("VLADIMIR TARASENKO")
#xG_v_GF_pershot("ALEXANDER SEMIN")
coach_story <- function(coach, year = unique(scored_data$season)) {
coach_story <- scored_data %>%
filter((Home_Coach == coach | Away_Coach == coach) & season %in% year) %>%
filter(!(Season_Type == "RS" & Period == 5)) %>%
filter(EmptyNet_SA == 0) %>%
select(season, Game_Id, Home_Team, Away_Team, xG_team, Game_State, Goal, Ev_Team, Home_Coach, Away_Coach) %>%
mutate(Coach = coach,
Strength = ifelse(Game_State %in% c("6v6","5v5","4v4","3v3"),"Even Strength","Special Teams"),
Home = ifelse(coach == Home_Coach, 1, 0),
Team = ifelse(Home == 1, as.character(Home_Team), as.character(Away_Team)),
xGF = ifelse((Ev_Team == Home_Team & Home == 1) | (Ev_Team != Home_Team & Home == 0),xG_team,0),
xGA = ifelse((Ev_Team != Home_Team & Home == 1) | (Ev_Team == Home_Team & Home == 0),xG_team,0),
GF = ifelse((Ev_Team == Home_Team & Home == 1) | (Ev_Team != Home_Team & Home == 0),Goal,0),
GA = ifelse((Ev_Team != Home_Team & Home == 1) | (Ev_Team == Home_Team & Home == 0),Goal,0),
SF = ifelse((Ev_Team == Home_Team & Home == 1) | (Ev_Team != Home_Team & Home == 0),1,0),
SA = ifelse((Ev_Team != Home_Team & Home == 1) | (Ev_Team == Home_Team & Home == 0),1,0)
) %>%
group_by(Coach, season, Team, Strength) %>%
summarise(GP = uniqueN(Game_Id),
xGF = sum(xGF),
xGA = sum(xGA),
GF = sum(GF),
GA = sum(GA),
xGD = xGF - xGA,
GD = GF - GA,
SF = sum(SF),
SA = sum(SA),
`Shooting Lift (GF - xGF) / GP` = sum((GF - xGF) / GP),
`Goaltending Lift (xGA - GA) / GP` = sum((xGA - GA) / GP),
`Scoring Chance Lift (xGF - xGA) / GP` = sum((xGF - xGA) / GP),
`Goal Differential (GF - GA) / GP` = sum((GF - GA) / GP))
coach_season_data <- coach_story %>%
select(Coach, season, Team, Strength, ends_with("/ GP")) %>%
melt(id.vars = c("Coach", "season", "Team","Strength"))
coach_season_data$variable <- factor(coach_season_data$variable, levels = c("Goal Differential (GF - GA) / GP","Scoring Chance Lift (xGF - xGA) / GP","Shooting Lift (GF - xGF) / GP","Goaltending Lift (xGA - GA) / GP"))
coach_season_plot <- coach_season_data %>%
ggplot(aes(x=reorder(interaction(season, Team),season), y=value, group=Strength, fill=Strength), alpha=0.75) +
facet_wrap(~variable, ncol = 1) +
geom_bar(stat = "identity", position = "stack") +
geom_hline(color="grey50", yintercept = 0, size = 3, alpha=0.6) +
#geom_label(aes(x=reorder(Team,`Goal Differential`),y=`Goal Differential`, label=ifelse(`Goal Differential` >= 0,paste0("+",`Goal Differential`),paste0(`Goal Differential`))), size=3, fill="grey85", alpha=0.75) +
theme_standard() + ggthemes::scale_fill_gdocs() +
theme(legend.position = "top",
panel.grid.major.x = element_line( colour = "white", size = 2),
panel.grid.major.y = element_line( colour = "white", size = 2)) +
#coord_flip() +
labs(title=paste0(coach," xG Components Per Game Coached by Season\nxG Adjusted for Multiplicativity, empty net and shootout goals removed\n@CrowdScoutSprts (github.com/C92Anderson/xG-Model)"),
x="", y=paste0("xG Lift to Team by Game"), fill="Strength")
ggsave(filename=paste0("/Users/colander1/Downloads/",coach,"_xG_byseason.png"), plot=coach_season_plot,  width=14, height=16)
return(coach_season_plot)
}
coach_story("GLEN GULUTZAN")
goalie_color <- goalie_season_results %>% ungroup() %>%
filter(!is.na(Age)) %>%
group_by(SA_Goalie) %>%
summarise(MaxAge = max(as.numeric(Age), na.rm=T),
total_seasons = uniqueN(season)) %>%
arrange(MaxAge) %>%
filter(total_seasons >= 5)
goalie_color$col <- rep(1:9, times=500)[1:nrow(goalie_color)]
season_aging <- function(szn) {
szn_next <- szn + 10001
data <- goalie_season_results %>%
filter(!is.na(Age)) %>%
filter(season %in% c(szn, szn_next)) %>%
group_by(SA_Goalie) %>%
mutate(Total_Shots = sum(Shots),
Age = max(Age),
szn_no = ifelse(season == szn, "szn1", "szn2")) %>%
select(SA_Goalie, Age, posterior_xG_xR_lift, Total_Shots, szn_no) %>%
distinct() %>%
dcast(SA_Goalie + Age + Total_Shots ~ szn_no, value.var = "posterior_xG_xR_lift") %>%
inner_join(goalie_color, by = "SA_Goalie")
plot <- data %>%
ggplot() +
geom_hline(yintercept=0, color="grey50", size=5) +
geom_point(aes(x=Age-1, y=szn1, group=SA_Goalie, size=Total_Shots, color=as.factor(col))) +
geom_point(aes(x=Age, y=szn2, group=SA_Goalie, size=Total_Shots, color=as.factor(col))) +
geom_segment(aes(x=Age-1, xend=Age, y=szn1, yend=szn2, group=SA_Goalie, size=Total_Shots, alpha=(max(Age)-Age), color=as.factor(col))) +
geom_point(aes(x=Age, y=szn2, group=SA_Goalie, size=Total_Shots, color=as.factor(col))) +
theme_standard() + ggthemes::scale_color_gdocs() +
ggrepel::geom_label_repel(aes(x=Age, y=szn2, label=SA_Goalie, color=as.factor(col),size=Total_Shots)) +
guides(color=FALSE) +
labs(title = paste0("Regressed Goalie Performance and Age, ",szn, " to ", szn_next,"\n@crowdscoutsprts (github.com/C92Anderson/xG-Model"),
x="Age, Season Start",
y="Regressed Save Percentage Over Expected",
alpha="Cumulative Shots",
size="Cumulative Shots") +
scale_y_continuous(labels = scales::percent, limits = c(-0.012,0.012)) +
xlim(c(19,43)) +
theme(legend.position = "top")
ggsave(filename=paste0("/Users/colander1/Downloads/goalie_age_lift_",szn,".png"), plot=plot,  width=22, height=16)
}
#season_aging(20162017)
#season_aging(20152016)
#season_aging(20142015)
#season_aging(20132014)
#season_aging(20122013)
#season_aging(20112012)
#season_aging(20102011)
raw_pull <- goalie_data_prep %>%
filter(Season_Type == "PO") %>%
filter(SA_Goalie == "HENRIK LUNDQVIST") %>%
group_by(season, season2, SA_Goalie) %>%
summarise(GSAA = sum(xG_FirstShot + (xR * 0.27)) - sum(Goal),
NonRebound_ShotAttempts = sum(NonRebound_Shot),
GP = uniqueN(Game_Id))
team_season_plot2 <- function(szn) {
team_goalie_season_results <- goalie_shot_level_prep %>%
filter(season == szn) %>%
group_by(SA_Team, SA_Goalie, season, Age) %>%
summarise(NonRebound_Shots = sum(NonRebound_Shot),
GA = sum(Goal),
xG_All = sum(sum(xG_FirstShot) + sum(xR * 0.27)),
xG_xR_Lift_dSv = (xG_All -sum(Goal)) / (sum(NonRebound_Shot)),
GPAA = xG_All - GA,
GPAR = xG_All - GA - (NonRebound_Shots * replacement_lift)) %>%
group_by(SA_Team, season) %>%
mutate(Team_GPAR = sum(xG_All) - sum(GA) - sum(NonRebound_Shots * replacement_lift),
Depth = rank(-NonRebound_Shots),
Goalie = paste0(sapply(strsplit(as.character(SA_Goalie), ' '), function(x) x[length(x)]))) %>%
arrange(-Team_GPAR,SA_Team, Depth) %>%
ggplot(aes(x=reorder(SA_Team, Team_GPAR), y = GPAR, group=SA_Goalie, label=Goalie, alpha = NonRebound_Shots, fill=as.factor(Depth))) +
geom_bar(stat="identity", position = "stack") +
geom_point(aes(x=reorder(SA_Team, - Team_GPAR), y=Team_GPAR), size = 12, alpha = 0.25, color = "grey50") +
#geom_text(aes(x=reorder(SA_Team, - Team_GPAA), y=Team_GPAA, label=SA_Team), size = 4, alpha = 0.8, color = "grey25", check_overlap = TRUE) +
geom_label(aes(x=reorder(SA_Team, - Team_GPAR), y=GPAR),stat="identity",
size = 3, position = position_stack(vjust = 0.5), color = "grey10", alpha = 0.5
) +
#  geom_point(aes(x=reorder(SA_Team, - Team_GPAA), y=GPAA, color = as.factor(Depth)), size = 3, position = "stack") +
scale_alpha_continuous(range = c(0.25, 1)) +
theme_standard() + ggthemes::scale_fill_gdocs() + ggthemes::scale_color_gdocs() +
coord_flip() +
labs(x="",y="Cumulative Goals Prevented Above Replacement",alpha="Shots Against",fill="Depth Chart",
title=paste0("Team Goals Prevented Above Replacement, Adjusted for Rebounds, ",szn," YTD - ",Sys.Date(),"\n@crowdscoutsprts (github.com/C92Anderson/xG-Model)")) +
theme(#legend.position = "bottom",
panel.grid.major.x = element_line( colour = "white", size = 2))
ggsave(filename=paste0("/Users/colander1/Documents/CWA/PlotsYTD/goalies_team_season_plot2_",szn,".png"), plot=team_goalie_season_results,  width=20, height=12)
}
team_season_plot2("20172018")
library("rvest")
teams <- c('ANA',	'ARI',	'BOS',	'BUF',	'CGY',	'CAR',	'CHI',	'COL',	'CBJ',	'DAL',	'DET',	'EDM',	'FLA',	'L.A',	'MIN',	'MTL',	'NSH',	'N.J',	'NYI',	'NYR',	'OTT',	'PHI',	'PIT',	'S.J',	'STL',	'T.B',	'TOR',	'VAN',	'VGK',	'WSH',	'WPG')
team_names <- c('anaheim-ducks',	'arizona-coyotes',	'boston-bruins',	'buffalo-sabres',	'calgary-flames',	'carolina-hurricanes',	'chicago-blackhawks',	'colorado-avalanche',	'columbus-blue-jackets',	'dallas-stars',	'detroit-red-wings',	'edmonton-oilers',	'florida-panthers',	'los-angeles-kings',	'minnesota-wild',	'montreal-canadiens',	'nashville-predators',	'new-jersey-devils',	'new-york-islanders',	'new-york-rangers',	'ottawa-senators',	'philadelphia-flyers',	'pittsburgh-penguins',	'san-jose-sharks',	'st-louis-blues',	'tampa-bay-lightning',	'toronto-maple-leafs',	'vancouver-canucks',	'vegas-golden-knights',	'washington-capitals',	'winnipeg-jets')
goalie_salary <- function(team) {
salary <- paste0("http://www.spotrac.com/nhl/",team,"/yearly/cap/") %>%
read_html() %>%
html_nodes(xpath='//*[@id="main"]/div[6]/table[6]') %>% ## goalies are table[6]
html_table()
salary <- salary[[1]]
salary$Team <- teams[match(team,team_names)]
return(salary)
}
team_goalie_salaries <- do.call(rbind,lapply(FUN=goalie_salary,team_names))
salary
library("rvest")
teams <- c('ANA',	'ARI',	'BOS',	'BUF',	'CGY',	'CAR',	'CHI',	'COL',	'CBJ',	'DAL',	'DET',	'EDM',	'FLA',	'L.A',	'MIN',	'MTL',	'NSH',	'N.J',	'NYI',	'NYR',	'OTT',	'PHI',	'PIT',	'S.J',	'STL',	'T.B',	'TOR',	'VAN',	'VGK',	'WSH',	'WPG')
team_names <- c('anaheim-ducks',	'arizona-coyotes',	'boston-bruins',	'buffalo-sabres',	'calgary-flames',	'carolina-hurricanes',	'chicago-blackhawks',	'colorado-avalanche',	'columbus-blue-jackets',	'dallas-stars',	'detroit-red-wings',	'edmonton-oilers',	'florida-panthers',	'los-angeles-kings',	'minnesota-wild',	'montreal-canadiens',	'nashville-predators',	'new-jersey-devils',	'new-york-islanders',	'new-york-rangers',	'ottawa-senators',	'philadelphia-flyers',	'pittsburgh-penguins',	'san-jose-sharks',	'st-louis-blues',	'tampa-bay-lightning',	'toronto-maple-leafs',	'vancouver-canucks',	'vegas-golden-knights',	'washington-capitals',	'winnipeg-jets')
goalie_salary <- function(team) {
salary <- paste0("http://www.spotrac.com/nhl/",team,"/yearly/cap/") %>%
read_html() %>%
html_nodes(xpath='//*[@id="main"]/div[6]/table[6]') %>% ## goalies are table[6]
html_table()
salary <- salary[[1]]
salary$Team <- teams[match(team,team_names)]
return(salary)
}
team_goalie_salaries <- do.call(rbind,lapply(FUN=goalie_salary,team_names))
goalie_salary("CGY")
goalie_salary <- function(team) {
salary <- paste0("http://www.spotrac.com/nhl/",team,"/yearly/cap/") %>%
read_html() %>%
html_nodes(xpath='//*[@id="main"]/div[6]/table[6]') %>% ## goalies are table[6]
html_table()
print(salary)
salary <- salary[[1]]
salary$Team <- teams[match(team,team_names)]
return(salary)
}
goalie_salary("CGY")
year <- 2017
nhl_df <- paste0("http://www.hockey-reference.com/leagues/NHL_",year,".html")%>%
read_html()
nhl_df <- paste0("http://www.hockey-reference.com/leagues/NHL_",year,".html")%>%
read_html() %>%
html_nodes(xpath='//*[@id="main"]/div[6]/table[6]') %>% ## goalies are table[6]
html_table()
replacement_lift
nhl_df <- paste0("http://www.hockey-reference.com/leagues/NHL_",year,".html")%>%
read_html()
nhl_df$node
nhl_df$doc
str(nhl_df)
nhl_df$doc[[1]]
nhl_df$doc[1]
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_node()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/html[@class='js cors cookies localstorage sessionstorage canvas no-touchevents unicode pointerevents flexwrap matchmedia vibrate desktop is_live is_modern overthrow-enabled gr__hockey-reference_com']/body[@class='hr']/div[@id='wrap']/div[@id='content']/div[@id='all_stats']/div[@class='table_outer_container mobile_table']/div[@id='div_stats']/div/pre[@id='csv_stats']") %>% ## goalies are table[6]
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/html[@class='js cors cookies localstorage sessionstorage canvas no-touchevents unicode pointerevents flexwrap matchmedia vibrate desktop is_live is_modern overthrow-enabled gr__hockey-reference_com']/body[@class='hr']/div[@id='wrap']/div[@id='content']/div[@id='all_stats']/div[@class='table_outer_container mobile_table']/div[@id='div_stats']/div/pre[@id='csv_stats']") %>%
html_table()
paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/html[@class='js cors cookies localstorage sessionstorage canvas no-touchevents unicode pointerevents flexwrap matchmedia vibrate desktop is_live is_modern overthrow-enabled gr__hockey-reference_com']/body[@class='hr']/div[@id='wrap']/div[@id='content']/div[@id='all_stats']/div[@class='table_outer_container mobile_table']/div[@id='div_stats']/div/pre[@id='csv_stats']") %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/html[@class='js cors cookies localstorage sessionstorage canvas no-touchevents unicode pointerevents flexwrap matchmedia vibrate desktop is_live is_modern overthrow-enabled gr__hockey-reference_com']/body[@class='hr sr_expanded']/div[@id='wrap']/div[@id='content']/div[@id='all_stats']/div[@class='table_outer_container']/div[@id='div_stats']/table[@id='stats']/tbody/") %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/div[@id='all_stats']/div[@class='table_outer_container']/div[@id='div_stats']/table[@id='stats']") %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/div[@id='all_stats']") %>%
html_table()
paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/div[@id='all_stats']") %>%
html_table()
paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath="/div[@id='all_stats']")
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "right", " " ))] | //*[contains(concat( " ", @class, " " ), concat( " ", "left", " " ))] | //*[contains(concat( " ", @class, " " ), concat( " ", "center", " " ))]') %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(xpath='//*[contains(concat( " ", @class, " " ), concat( " ", "xh-highlight", " " ))] | //*[(@id = "stats")]//*[contains(concat( " ", @class, " " ), concat( " ", "right", " " ))] | //*[(@id = "stats")]//*[contains(concat( " ", @class, " " ), concat( " ", "left", " " ))] | //*[(@id = "stats")]//*[contains(concat( " ", @class, " " ), concat( " ", "poptip", " " ))]') %>%
html_table()
nhl_df <- paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(".xh-highlight , #stats .right , #stats .left , #stats .poptip") %>%
html_table()
paste0("https://www.hockey-reference.com/leagues/NHL_2017.html#stats::none")%>%
read_html() %>%
html_nodes(".xh-highlight , #stats .right , #stats .left , #stats .poptip") %>%
html_table()
rm(list = ls(all=T))
library(ggplot2);library(dplyr); library(DataCombine)
library(glmnet); library(nhlscrapr); library(caret); library(RMySQL); library(readr); library(reshape2); library(rvest)
library(httr); library(data.table); library("reshape2");
library(ggplot2)
library(TeachBayes)
library(xts)
library(RMySQL)
library(DBI)
theme_set(theme_bw())
txt <- element_text(size = 18, colour = "grey25", face = "plain")
bold_txt <- element_text(size = 20, colour = "navy", face = "bold")
theme_standard <- function(base_size = 16, base_family = "") {
theme_bw(base_size = base_size, base_family = base_family) +
theme(
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.grid.major.y = element_line( colour = "white", size = 2),
panel.grid.major.x = element_line( colour = "white", size = 2),
#strip.text.x = element_text(size = 24),
#strip.text.y = element_text(size = 24),
panel.background = element_rect(fill="grey90"),
plot.background = element_rect(fill="grey90"),
legend.background = element_rect(fill="grey90"),
legend.key = element_rect(fill="grey90", size = 20),
legend.key.size = unit(1,"cm"),
panel.border = element_blank(),
line = element_line( colour = "white", size = 2),
axis.text.x = element_text(angle = 90, hjust = 1),
text = txt,
plot.title = bold_txt,
axis.title = txt,
axis.text = txt,
legend.title = bold_txt,
legend.text = txt )
}
load("~/Documents/CWA/Hockey Data/skater_shift_level_1418.RData")
load("~/Documents/CWA/Hockey Data/goalie_day_level.RData")
goalie_est_ability <- goalie_day_level %>% select(SA_Goalie_Id, season, Game_Id, gameday_estimated_ability)
penalty_xG <- 0.17
### Join & Create target variable
skater_shift_level <-skater_shift_level_1418 %>%
mutate(Impacts = as.factor(ifelse(GF > 0,"teamGoalFor",
ifelse(GA > 0,"teamGoalAgainst",
ifelse(PenTake > 0,"teamPenTake",
ifelse(PenDraw > 0,"teamPenDrawn",
"NA"))))),
Production = as.factor(ifelse(iG > 0,"iGoal",
ifelse(iP1 > 0,"iAssist1",
ifelse(iP > 0,"iAssist2",
"NA")))),
Points1 = iG + iP1,
Points2 = iG + iP,
Penalty = as.factor(ifelse(iPenDraw > 0,"iPenDrawn",
ifelse(iPenTake > 0,"iPenTake",
"NA"))),
xGF_total = 0 + xGF + (PenDraw * penalty_xG),
xGA_total = 0 + xGA + (PenTake * penalty_xG)) %>%
na.omit() %>%
ungroup() %>%
left_join(goalie_est_ability %>% rename(Team_Goalie_EstAbility = gameday_estimated_ability), by = c("Team_Goalie_Id" = "SA_Goalie_Id","season"="season","Game_Id"="Game_Id")) %>%
left_join(goalie_est_ability %>% rename(Opposing_Goalie_EstAbility = gameday_estimated_ability), by = c("Opposing_Goalie_Id" = "SA_Goalie_Id","season"="season","Game_Id"="Game_Id"))
skater_shift_level$Impacts <- relevel(skater_shift_level$Impacts, ref = "NA")
skater_shift_level$Production <- relevel(skater_shift_level$Production, ref = "NA")
skater_shift_level$Penalty <- relevel(skater_shift_level$Penalty, ref = "NA")
skater_shift_level %>% group_by(Impacts) %>% summarise(Cnt = n()) %>% group_by() %>% mutate(Share = Cnt / sum(Cnt)) %>% arrange(-Cnt)
skater_shift_level %>% group_by(Production,Penalty) %>% summarise(Cnt = n()) %>% group_by() %>% mutate(Share = Cnt / sum(Cnt)) %>% arrange(-Cnt)
skater_shift_level %>% group_by(Points1, Points2, Production) %>% summarise(cnt = n())
skater_shift_level %>%
select(xGF_total, xGA_total) %>%
melt() %>%
ggplot(aes(x=value, color=variable)) +
geom_density()
skater_shift_level %>%
select(xGF_total, xGA_total) %>%
melt() %>%
ggplot(aes(x=value, color=variable)) +
geom_density()
quality_features <- skater_shift_level %>%
select(ends_with("Competition"), ends_with("Teammates")) %>%
melt() %>%
ggplot(aes(x=value, fill=variable)) +
geom_density(alpha=0.3, color="grey80") +
theme_standard() +
ggthemes::scale_fill_gdocs() +
labs(title="Player-Shift Level Teammate and Competition Quality",x="Estimated Ability",fill="Metric")
ggsave(filename="/Users/colander1/Downloads/quality_features.png", plot=quality_features,  width=16, height=12)
load("~/Documents/CWA/Hockey Data/player_level_quality.RData")
skater_shift_level_clean <- skater_shift_level %>%
left_join(unique(player_level_quality[c("shooterID","Pos")]), by = c("Player_Id"="shooterID")) %>%
select(xGF_total, xGA_total, Player_Venue,Score_State,Off_FO_Shift, Def_FO_Shift,OTF_Shift,Strength_State, Mean_Teammates_F, Mean_Competition_F, Mean_Teammates_D, Mean_Competition_D, Team_Goalie_EstAbility, Opposing_Goalie_EstAbility, Pos) %>%
mutate(Player_Venue = as.factor(Player_Venue),
Off_FO_Shift = as.factor(Off_FO_Shift),
Def_FO_Shift = as.factor(Def_FO_Shift),
OTF_Shift = as.factor(OTF_Shift),
Pos = as.factor(Pos))
model_features <- skater_shift_level_clean %>% select(-starts_with("xG"), -ends_with("EstAbility"))
## Scale and Center
#preProcValues <- preProcess(model_features, method = c("center", "scale"))
#model_features1 <- predict(preProcValues, model_features)
## Dummy Variable
dmy <- dummyVars(" ~ .", data = model_features,fullRank = T)
input_data <- data.frame(predict(dmy, newdata = model_features))
feature_list <- colnames(input_data)
model_data <- input_data %>%
mutate(xGF_total = skater_shift_level$xGF_total,
xGA_total = skater_shift_level$xGA_total,
Team_Goalie_EstAbility = ifelse(is.na(skater_shift_level$Team_Goalie_EstAbility),0,skater_shift_level$Team_Goalie_EstAbility),
Opposing_Goalie_EstAbility = ifelse(is.na(skater_shift_level$Opposing_Goalie_EstAbility),0,skater_shift_level$Opposing_Goalie_EstAbility),
tGF = (ifelse(skater_shift_level$GF > 0,1,0)),
txGF = skater_shift_level$xGF,
tPD = (ifelse(skater_shift_level$PenDraw > 0,1,0)),
tPT = (ifelse(skater_shift_level$PenTake > 0,1,0))
)
tGF <- factor(ifelse(skater_shift_level$GF > 0,1,0))
tGA <- factor(ifelse(skater_shift_level$GA > 0,1,0))
tPD <- factor(ifelse(skater_shift_level$PenDraw > 0,1,0))
tPT <- factor(ifelse(skater_shift_level$PenTake > 0,1,0))
iG <- factor(ifelse(skater_shift_level$iG > 0,1,0))
iA1 <- factor(ifelse(skater_shift_level$iP1 - skater_shift_level$iG > 0,1,0))
iA2 <- factor(ifelse(skater_shift_level$iP - skater_shift_level$iP1 > 0,1,0))
iPD <- factor(ifelse(skater_shift_level$iPenDraw > 0,1,0))
iPT <- factor(ifelse(skater_shift_level$iPenTake > 0,1,0))
txGF <- skater_shift_level$xGF_total
txGA <- skater_shift_level$xGA_total
set.seed(7)
# configure multicore
#library(doMC)
#registerDoMC(cores=4)
logistic_model <- function(target, nm, model_features = feature_list) {
## Cross-validation
train_control <- trainControl(method="cv", number=5,  allowParallel = TRUE)
## Lambda gird
grid <- expand.grid(lambda=seq(0,1,by=0.2), cp = c("aic", "bic"))
model_data2 <- model_data[model_features] %>%
cbind(target)
positive_df <- model_data2 %>%
filter(target == 1)
negative_df <- model_data2 %>%
sample_n(size=nrow(positive_df))
model_df <- positive_df %>%
bind_rows(negative_df) %>%
sample_n(500000)
## Model, penaltized logistic regression
model <- caret::train(target ~ .,
data = model_df,
trControl=train_control,
tuneGrid=grid,
method="plr"
)  #method="glm", family="binomial") metric="LogLoss","#metric="ROC"#,
#model <- glm(target ~ ., data = model_data2, family=binomial(link='logit'))
## Output variable imporance
variable_importance <- varImp(model)
## Output predicted values
predicted <- predict(model, model_data2,type="prob")$`1`
## Print results
niave_ll <- Metrics::logLoss(as.numeric(target)-1,mean(as.numeric(target)-1))
model_ll <- Metrics::logLoss(as.numeric(target)-1,predicted)
lift <- round((niave_ll - model_ll) / niave_ll,4)
print(paste0(nm," Model, Baseline Logloss: ",round(niave_ll,4),"Model Logloss: ",round(model_ll,4),"Lift: ",lift))
## Save Model
saveRDS(model, paste0("/Users/colander1/Documents/CWA/Hockey Data/WARData/",nm,"_model.rds"))
return(list(model,variable_importance, predicted))
}
print(feature_list)
tGF_output <- logistic_model(tGF, "teamGF", c(feature_list,"Opposing_Goalie_EstAbility"))
set.seed(7)
# configure multicore
#library(doMC)
#registerDoMC(cores=4)
logistic_model <- function(target, nm, model_features = feature_list) {
## Cross-validation
train_control <- trainControl(method="cv", number=5,  allowParallel = TRUE)
## Lambda gird
grid <- expand.grid(lambda=seq(0,1,by=0.2), cp = c("aic", "bic"))
model_data2 <- model_data[model_features] %>%
cbind(target)
positive_df <- model_data2 %>%
filter(target == 1)
negative_df <- model_data2 %>%
sample_n(size=nrow(positive_df))
model_df <- positive_df %>%
bind_rows(negative_df)
## Model, penaltized logistic regression
model <- caret::train(target ~ .,
data = model_df,
trControl=train_control,
tuneGrid=grid,
method="plr"
)  #method="glm", family="binomial") metric="LogLoss","#metric="ROC"#,
#model <- glm(target ~ ., data = model_data2, family=binomial(link='logit'))
## Output variable imporance
variable_importance <- varImp(model)
## Output predicted values
predicted <- predict(model, model_data2,type="prob")$`1`
## Print results
niave_ll <- Metrics::logLoss(as.numeric(target)-1,mean(as.numeric(target)-1))
model_ll <- Metrics::logLoss(as.numeric(target)-1,predicted)
lift <- round((niave_ll - model_ll) / niave_ll,4)
print(paste0(nm," Model, Baseline Logloss: ",round(niave_ll,4),"Model Logloss: ",round(model_ll,4),"Lift: ",lift))
## Save Model
saveRDS(model, paste0("/Users/colander1/Documents/CWA/Hockey Data/WARData/",nm,"_model.rds"))
return(list(model,variable_importance, predicted))
}
print(feature_list)
tGF_output <- logistic_model(tGF, "teamGF", c(feature_list,"Opposing_Goalie_EstAbility"))
